// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  AUTHOR
  ADMIN
}

enum TypeReaction {
  LIKE
  DISLIKE
}

model User {
  id             Int        @id @default(autoincrement())
  userName       String
  hashedPassword String
  role           Role
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  Blog           Blog[]
  Comment        Comment[]
  Reaction       Reaction[]
}

model Blog {
  id       Int        @id @default(autoincrement())
  title    String
  content  String
  authorId Int
  author   User       @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Comment  Comment[]
  Reaction Reaction[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  text      String
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  blogId    Int
  blog      Blog     @relation(fields: [blogId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Reaction {
  id        Int           @id @default(autoincrement())
  type      TypeReaction?
  userId    Int
  user      User          @relation(fields: [userId], references: [id])
  blogId    Int
  blog      Blog          @relation(fields: [blogId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}
