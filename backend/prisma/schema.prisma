// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider     = "prisma-client"
  output       = "../src/generated/prisma"
  moduleFormat = "esm"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  AUTHOR
  ADMIN
}

enum TypeReaction {
  LIKE
  DISLIKE
}

model User {
  id             String     @id @default(uuid())
  userName       String     @unique
  hashedPassword String
  role           Role       @default(USER)
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  Blog           Blog[]
  Comment        Comment[]
  Reaction       Reaction[]
}

model Blog {
  id          String     @id @default(uuid())
  title       String
  content     String
  isPublished Boolean    @default(true)
  authorId    String
  author      User       @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Comment     Comment[]
  Reaction    Reaction[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Comment {
  id        String   @id @default(uuid())
  text      String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  blogId    String
  blog      Blog     @relation(fields: [blogId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Reaction {
  id        String       @id @default(uuid())
  type      TypeReaction
  userId    String
  user      User         @relation(fields: [userId], references: [id])
  blogId    String
  blog      Blog         @relation(fields: [blogId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}
